{
    "sourceFile": "train_model.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1725470148042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725471033774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     \n     return model\n \n def save_model(model, file_path):\n-    \"\"\"Save the trained model to a file.\"\"\"\n+    \"\"\"Save the trained model to a file using joblib.\"\"\"\n     joblib.dump(model, file_path)\n     print(f'Model saved to {file_path}')\n \n def main():\n"
                },
                {
                    "date": 1725473119833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,19 +6,27 @@\n import joblib\n \n def load_data(file_path):\n     \"\"\"Load JSON data from a file.\"\"\"\n-    with open(file_path, 'r') as file:\n-        data = json.load(file)\n+    try:\n+        with open(file_path, 'r') as file:\n+            data = json.load(file)\n+    except FileNotFoundError:\n+        raise FileNotFoundError(f\"File {file_path} not found.\")\n+    except json.JSONDecodeError:\n+        raise ValueError(f\"Error decoding JSON from {file_path}.\")\n     return data\n \n def preprocess_data(data):\n     \"\"\"Convert JSON data to a DataFrame and preprocess it.\"\"\"\n     df = pd.json_normalize(data)\n     \n     # Convert time columns to datetime\n-    df['preferred_time'] = pd.to_datetime(df['preferred_time'], format='%H:%M').dt.time\n-    df['delivery_time'] = pd.to_datetime(df['delivery_time'], format='%H:%M').dt.time\n+    try:\n+        df['preferred_time'] = pd.to_datetime(df['preferred_time'], format='%H:%M').dt.time\n+        df['delivery_time'] = pd.to_datetime(df['delivery_time'], format='%H:%M').dt.time\n+    except ValueError:\n+        raise ValueError(\"Time format should be HH:MM\")\n     \n     # Convert times to minutes since midnight\n     df['preferred_time_minutes'] = df['preferred_time'].apply(lambda x: x.hour * 60 + x.minute)\n     df['delivery_time_minutes'] = df['delivery_time'].apply(lambda x: x.hour * 60 + x.minute)\n"
                },
                {
                    "date": 1725475775749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,24 @@\n from sklearn.linear_model import LinearRegression\n from sklearn.model_selection import train_test_split\n from sklearn.metrics import mean_squared_error\n import joblib\n+import logging\n \n+# Set up logging\n+logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n+\n def load_data(file_path):\n     \"\"\"Load JSON data from a file.\"\"\"\n     try:\n         with open(file_path, 'r') as file:\n             data = json.load(file)\n     except FileNotFoundError:\n-        raise FileNotFoundError(f\"File {file_path} not found.\")\n+        logging.error(f\"File {file_path} not found.\")\n+        raise\n     except json.JSONDecodeError:\n-        raise ValueError(f\"Error decoding JSON from {file_path}.\")\n+        logging.error(f\"Error decoding JSON from {file_path}.\")\n+        raise\n     return data\n \n def preprocess_data(data):\n     \"\"\"Convert JSON data to a DataFrame and preprocess it.\"\"\"\n@@ -24,9 +30,10 @@\n     try:\n         df['preferred_time'] = pd.to_datetime(df['preferred_time'], format='%H:%M').dt.time\n         df['delivery_time'] = pd.to_datetime(df['delivery_time'], format='%H:%M').dt.time\n     except ValueError:\n-        raise ValueError(\"Time format should be HH:MM\")\n+        logging.error(\"Time format should be HH:MM\")\n+        raise\n     \n     # Convert times to minutes since midnight\n     df['preferred_time_minutes'] = df['preferred_time'].apply(lambda x: x.hour * 60 + x.minute)\n     df['delivery_time_minutes'] = df['delivery_time'].apply(lambda x: x.hour * 60 + x.minute)\n@@ -34,8 +41,15 @@\n     return df\n \n def train_model(df):\n     \"\"\"Train a machine learning model.\"\"\"\n+    if df.empty:\n+        raise ValueError(\"DataFrame is empty. No data to train the model.\")\n+    \n+    required_columns = ['preferred_time_minutes', 'delivery_time_minutes']\n+    if not all(col in df.columns for col in required_columns):\n+        raise ValueError(f\"DataFrame must contain the following columns: {required_columns}\")\n+\n     X = df[['preferred_time_minutes']]\n     y = df['delivery_time_minutes']\n \n     # Split data into training and test sets\n@@ -47,16 +61,16 @@\n     \n     # Evaluate the model\n     y_pred = model.predict(X_test)\n     mse = mean_squared_error(y_test, y_pred)\n-    print(f'Mean Squared Error: {mse:.2f}')\n+    logging.info(f'Mean Squared Error: {mse:.2f}')\n     \n     return model\n \n def save_model(model, file_path):\n     \"\"\"Save the trained model to a file using joblib.\"\"\"\n     joblib.dump(model, file_path)\n-    print(f'Model saved to {file_path}')\n+    logging.info(f'Model saved to {file_path}')\n \n def main():\n     # Paths\n     json_file = 'delivery.json'\n"
                },
                {
                    "date": 1725477286768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,16 @@\n     \"\"\"Load JSON data from a file.\"\"\"\n     try:\n         with open(file_path, 'r') as file:\n             data = json.load(file)\n+        logging.info(f\"Data loaded successfully from {file_path}.\")\n+        return data\n     except FileNotFoundError:\n         logging.error(f\"File {file_path} not found.\")\n         raise\n     except json.JSONDecodeError:\n         logging.error(f\"Error decoding JSON from {file_path}.\")\n         raise\n-    return data\n \n def preprocess_data(data):\n     \"\"\"Convert JSON data to a DataFrame and preprocess it.\"\"\"\n     df = pd.json_normalize(data)\n@@ -29,25 +30,29 @@\n     # Convert time columns to datetime\n     try:\n         df['preferred_time'] = pd.to_datetime(df['preferred_time'], format='%H:%M').dt.time\n         df['delivery_time'] = pd.to_datetime(df['delivery_time'], format='%H:%M').dt.time\n+        logging.info(\"Time columns successfully converted to datetime.\")\n     except ValueError:\n         logging.error(\"Time format should be HH:MM\")\n         raise\n     \n     # Convert times to minutes since midnight\n     df['preferred_time_minutes'] = df['preferred_time'].apply(lambda x: x.hour * 60 + x.minute)\n     df['delivery_time_minutes'] = df['delivery_time'].apply(lambda x: x.hour * 60 + x.minute)\n+    logging.info(\"Time columns successfully converted to minutes since midnight.\")\n     \n     return df\n \n def train_model(df):\n     \"\"\"Train a machine learning model.\"\"\"\n     if df.empty:\n+        logging.error(\"DataFrame is empty. No data to train the model.\")\n         raise ValueError(\"DataFrame is empty. No data to train the model.\")\n     \n     required_columns = ['preferred_time_minutes', 'delivery_time_minutes']\n     if not all(col in df.columns for col in required_columns):\n+        logging.error(f\"DataFrame must contain the following columns: {required_columns}\")\n         raise ValueError(f\"DataFrame must contain the following columns: {required_columns}\")\n \n     X = df[['preferred_time_minutes']]\n     y = df['delivery_time_minutes']\n@@ -67,22 +72,29 @@\n     return model\n \n def save_model(model, file_path):\n     \"\"\"Save the trained model to a file using joblib.\"\"\"\n-    joblib.dump(model, file_path)\n-    logging.info(f'Model saved to {file_path}')\n+    try:\n+        joblib.dump(model, file_path)\n+        logging.info(f\"Model saved to {file_path}\")\n+    except Exception as e:\n+        logging.error(f\"Error saving model: {str(e)}\")\n+        raise\n \n def main():\n     # Paths\n     json_file = 'delivery.json'\n     model_file = 'trained_model.pkl'\n     \n-    # Load and preprocess data\n-    data = load_data(json_file)\n-    df = preprocess_data(data)\n-    \n-    # Train and save the model\n-    model = train_model(df)\n-    save_model(model, model_file)\n+    try:\n+        # Load and preprocess data\n+        data = load_data(json_file)\n+        df = preprocess_data(data)\n+        \n+        # Train and save the model\n+        model = train_model(df)\n+        save_model(model, model_file)\n+    except Exception as e:\n+        logging.error(f\"An error occurred: {str(e)}\")\n \n if __name__ == '__main__':\n     main()\n"
                }
            ],
            "date": 1725470148042,
            "name": "Commit-0",
            "content": "import json\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport joblib\n\ndef load_data(file_path):\n    \"\"\"Load JSON data from a file.\"\"\"\n    with open(file_path, 'r') as file:\n        data = json.load(file)\n    return data\n\ndef preprocess_data(data):\n    \"\"\"Convert JSON data to a DataFrame and preprocess it.\"\"\"\n    df = pd.json_normalize(data)\n    \n    # Convert time columns to datetime\n    df['preferred_time'] = pd.to_datetime(df['preferred_time'], format='%H:%M').dt.time\n    df['delivery_time'] = pd.to_datetime(df['delivery_time'], format='%H:%M').dt.time\n    \n    # Convert times to minutes since midnight\n    df['preferred_time_minutes'] = df['preferred_time'].apply(lambda x: x.hour * 60 + x.minute)\n    df['delivery_time_minutes'] = df['delivery_time'].apply(lambda x: x.hour * 60 + x.minute)\n    \n    return df\n\ndef train_model(df):\n    \"\"\"Train a machine learning model.\"\"\"\n    X = df[['preferred_time_minutes']]\n    y = df['delivery_time_minutes']\n\n    # Split data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    # Initialize and train the model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    # Evaluate the model\n    y_pred = model.predict(X_test)\n    mse = mean_squared_error(y_test, y_pred)\n    print(f'Mean Squared Error: {mse:.2f}')\n    \n    return model\n\ndef save_model(model, file_path):\n    \"\"\"Save the trained model to a file.\"\"\"\n    joblib.dump(model, file_path)\n    print(f'Model saved to {file_path}')\n\ndef main():\n    # Paths\n    json_file = 'delivery.json'\n    model_file = 'trained_model.pkl'\n    \n    # Load and preprocess data\n    data = load_data(json_file)\n    df = preprocess_data(data)\n    \n    # Train and save the model\n    model = train_model(df)\n    save_model(model, model_file)\n\nif __name__ == '__main__':\n    main()\n"
        }
    ]
}